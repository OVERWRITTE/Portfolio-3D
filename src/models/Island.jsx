/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { events, useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three"

import islandScene from "../assets/3d/island.glb"

const Island = ({ isRotating, setIsRotating, setCurrentStage, ...props }) => {

  const islandRef = useRef();

  const { gl, viewport } = useThree()

  const { nodes, materials } = useGLTF(islandScene);

  const lastX = useRef(0)
  const rotationSpeed = useRef(0)
  const dampingFactor = 0.95;

  const handlerPointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
  }

  const handlerPointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlerPointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    if (isRotating) {

      const clientX = e.touches
        ? e.touches[0].clientX
        : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      lastX.current = clientX;
    }
  }
  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01 * Math.PI;
    } else if (!isRotating) setIsRotating(false);
    islandRef.current.rotation.y -= 0.01 * Math.PI;
  }

  const handleKeyUp = (e) => {

  }

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;

    } else {
      const rotation = islandRef.current.rotation.y;

      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      //guarda la orientacion
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlerPointerDown);
    canvas.addEventListener('pointerup', handlerPointerUp);
    canvas.addEventListener('pointermove', handlerPointerMove);
    document.addEventListener("keyUp", handleKeyUp);
    document.addEventListener("keydown", handleKeyDown);


    return () => {
      canvas.removeEventListener('pointerdown', handlerPointerDown);
      canvas.removeEventListener('pointerup', handlerPointerUp);
      canvas.removeEventListener('pointermove', handlerPointerMove);
      document.removeEventListener("keyUp", handleKeyUp);
      document.removeEventListener("keydown", handleKeyDown);
    }

  }, [gl, handlerPointerDown, handlerPointerUp, handlerPointerMove])



  return (
    <a.group ref={islandRef} {...props} >
      <mesh
        receiveShadow
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        receiveShadow
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}

export default Island;
